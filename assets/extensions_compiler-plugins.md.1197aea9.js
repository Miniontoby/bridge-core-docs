import{_ as s,o as n,c as a,d as l}from"./app.2cdd2a5e.js";const C=JSON.parse('{"title":"Compiler Plugins","description":"","frontmatter":{"description":"","sidebar":"extensions"},"headers":[{"level":2,"title":"Registering a Compiler Plugin","slug":"registering-a-compiler-plugin"},{"level":2,"title":"Compiler Plugin File Structure","slug":"compiler-plugin-file-structure"},{"level":2,"title":"Compiler Hooks","slug":"compiler-hooks"},{"level":2,"title":"Examples","slug":"examples"}],"relativePath":"extensions/compiler-plugins.md","lastUpdated":1665861306000}'),e={name:"extensions/compiler-plugins.md"},o=l(`<h1 id="compiler-plugins" tabindex="-1">Compiler Plugins <a class="header-anchor" href="#compiler-plugins" aria-hidden="true">#</a></h1><p>bridge.&#39;s compiler architecture allows anyone to create powerful plugins that can modify the compiler output in almost any way.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can read more about bridge.&#39;s compiler architecture and Dash, bridge.&#39;s compiler, <a href="/guide/advanced/dash/">here</a>.</p></div><h2 id="registering-a-compiler-plugin" tabindex="-1">Registering a Compiler Plugin <a class="header-anchor" href="#registering-a-compiler-plugin" aria-hidden="true">#</a></h2><p>A compiler plugin should be added by putting it in the <code>&lt;EXTENSION NAME&gt;/compiler</code> folder of an extension. The plugin can then be registered via the extension manifest.</p><p>In the extension manifest you need a <a href="/extensions/extension-manifest.html#compiler"><code>&quot;compiler&quot;</code></a> property.</p><h2 id="compiler-plugin-file-structure" tabindex="-1">Compiler Plugin File Structure <a class="header-anchor" href="#compiler-plugin-file-structure" aria-hidden="true">#</a></h2><p>A compiler plugin should have <code>module.exports</code> set as a function which returns the compiler hooks which you are using, with logic within them.</p><p>Example:</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">blockPath</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BP/blocks</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		transform</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">filePath</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fileContent</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;">// This would add &quot;test&quot; to the end of every block file.</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">filePath</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">blockPath</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">fileContent</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">return</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>This function receives context parameters to be used in the plugin. These are:</p><ul><li><p><code>fileSystem: FileSystem</code> Returns the <a href="https://github.com/bridge-core/editor/blob/main/src/components/FileSystem/FileSystem.ts" target="_blank" rel="noreferrer">FileSystem</a> instance.</p></li><li><p><code>outputFileSystem: FileSystem</code> Returns the output <a href="https://github.com/bridge-core/editor/blob/main/src/components/FileSystem/FileSystem.ts" target="_blank" rel="noreferrer">FileSystem</a> instance.</p></li><li><p><code>hasComMojangDirectory: boolean</code> Allows you to check whether the com.mojang folder has been linked.</p></li><li><p><code>compileFiles: (files: string[]) =&gt; Promise&lt;void&gt;</code> A function allowing you to force compilation on a list of file paths.</p></li><li><p><code>getAliases: (filePath: string) =&gt; string[]</code> Returns all aliases registered in the <code>registerAliases()</code> hook for a given file path.</p></li><li><p><code>targetVersion: string</code> Allows you to read the project target version.</p></li><li><p><code>options: { mode: &#39;dev&#39; | &#39;build&#39;, isFileRequest: boolean, restartDevServer: boolean, [key: string]: any}</code></p><ul><li><p><code>mode: &#39;dev&#39; | &#39;build&#39;</code> Allows you to read the current compiler mode.</p></li><li><p><code>isFileRequest: boolean</code> Some of bridge.&#39;s core components manually request a file to be compiled. These file requests don&#39;t necessarily need to represent an underlying file on your disk. (Example: The particle preview requests a compilation of an unsaved particle file)</p></li><li><p><code>restartDevServer: boolean</code> Whether this compilation is the dev server being restarted.</p></li><li><p><code>[key: string]: any</code> Allows you to access any arguments passed to the plugin in the compiler config.</p></li></ul></li></ul><h2 id="compiler-hooks" tabindex="-1">Compiler Hooks <a class="header-anchor" href="#compiler-hooks" aria-hidden="true">#</a></h2><div class="language-ts"><button class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">	 * Runs once before a build process starts</span></span>
<span class="line"><span style="color:#676E95;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">buildStart</span><span style="color:#A6ACCD;">(): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;void&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">	 * Register files that should be loaded too</span></span>
<span class="line"><span style="color:#676E95;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">include</span><span style="color:#A6ACCD;">(): Maybe</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">string[]</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">	 * Transform file path</span></span>
<span class="line"><span style="color:#676E95;">	 * - E.g. adjust file path to point to build folder</span></span>
<span class="line"><span style="color:#676E95;">	 * - Return null to omit file from build output</span></span>
<span class="line"><span style="color:#676E95;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">transformPath</span><span style="color:#A6ACCD;">(filePath: string </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">): Maybe</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">	 * Read the file at \`filePath\` and return its content</span></span>
<span class="line"><span style="color:#676E95;">	 * - Return null/undefined to just copy the file over</span></span>
<span class="line"><span style="color:#676E95;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">read</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">		filePath: string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		fileHandle</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">getFile</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">File</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">File</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> any</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">	 * Load the fileContent and bring it into a usable form</span></span>
<span class="line"><span style="color:#676E95;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">(filePath: string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fileContent: any): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> any</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">	 * Provide alternative lookups for a file</span></span>
<span class="line"><span style="color:#676E95;">	 * - E.g. custom component names</span></span>
<span class="line"><span style="color:#676E95;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">registerAliases</span><span style="color:#A6ACCD;">(source: string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fileContent: any): Maybe</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">string[]</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">	 * Register that a file depends on other files</span></span>
<span class="line"><span style="color:#676E95;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(source: string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fileContent: any): Maybe</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">string[]</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">	 * Transform a file&#39;s content</span></span>
<span class="line"><span style="color:#676E95;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">transform</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">		filePath: string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		fileContent: any</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		dependencies</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> any</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> any</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">	 * Prepare data before it gets written to disk</span></span>
<span class="line"><span style="color:#676E95;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">finalizeBuild</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">		filePath: string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">		fileContent: any</span></span>
<span class="line"><span style="color:#A6ACCD;">	): Maybe</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">string </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> Uint8Array </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> ArrayBuffer </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> Blob</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">	 * Runs once after a build process ended</span></span>
<span class="line"><span style="color:#676E95;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">buildEnd</span><span style="color:#A6ACCD;">(): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;void&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span></span>
<span class="line"></span></code></pre></div><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-hidden="true">#</a></h2><ul><li><p><a href="https://github.com/bridge-core/plugins/tree/master/plugins/textureList" target="_blank" rel="noreferrer">Texture List Generator</a></p></li><li><p><a href="https://github.com/bridge-core/plugins/tree/master/plugins/jsonEncoder" target="_blank" rel="noreferrer">JSON Encoder</a></p></li><li><p><a href="https://github.com/bridge-core/plugins/tree/master/plugins/CustomEntitySyntax" target="_blank" rel="noreferrer">Custom Entity Syntax</a> <strong>This plugin uses <a href="https://www.rollupjs.org/" target="_blank" rel="noreferrer"><strong>rollup.js</strong></a> to bundle third party packages into the plugin.</strong></p></li></ul>`,16),p=[o];function t(r,c,i,y,D,F){return n(),a("div",null,p)}const d=s(e,[["render",t]]);export{C as __pageData,d as default};
