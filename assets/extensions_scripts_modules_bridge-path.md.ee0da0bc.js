import{_ as e,o as t,c as a,i as r}from"./app.13fe09d4.js";const x=JSON.parse('{"title":"@bridge/path","description":"","frontmatter":{"title":"@bridge/path","description":"","sidebar":"scripts"},"headers":[{"level":2,"title":"Functions","slug":"functions"},{"level":3,"title":"basename","slug":"basename"},{"level":3,"title":"dirname","slug":"dirname"},{"level":3,"title":"extname","slug":"extname"},{"level":3,"title":"join","slug":"join"},{"level":3,"title":"relative","slug":"relative"}],"relativePath":"extensions/scripts/modules/bridge-path.md","lastUpdated":1657873165000}'),d={name:"extensions/scripts/modules/bridge-path.md"},n=r('<h1 id="bridge-path" tabindex="-1">@bridge/path <a class="header-anchor" href="#bridge-path" aria-hidden="true">#</a></h1><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-hidden="true">#</a></h2><h3 id="basename" tabindex="-1">basename <a class="header-anchor" href="#basename" aria-hidden="true">#</a></h3><p>\u25B8 <strong>basename</strong>(<code>p</code>, <code>ext?</code>): <code>string</code></p><p>Return the last portion of a path.</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>p</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The path to evaluate.</td></tr><tr><td style="text-align:left;"><code>ext?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">Optionally, an extension to remove from the result.</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-hidden="true">#</a></h4><p><code>string</code></p><hr><h3 id="dirname" tabindex="-1">dirname <a class="header-anchor" href="#dirname" aria-hidden="true">#</a></h3><p>\u25B8 <strong>dirname</strong>(<code>p</code>): <code>string</code></p><p>Return the directory name of a path.</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>p</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The path to evaluate.</td></tr></tbody></table><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-hidden="true">#</a></h4><p><code>string</code></p><hr><h3 id="extname" tabindex="-1">extname <a class="header-anchor" href="#extname" aria-hidden="true">#</a></h3><p>\u25B8 <strong>extname</strong>(<code>p</code>): <code>string</code></p><p>Return the extension of the path, from the last &#39;.&#39; to end of string in the last portion of the path. If there is no &#39;.&#39; in the last portion of the path or the first character of it is &#39;.&#39;, then it returns an empty string.</p><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>p</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The path to evaluate</td></tr></tbody></table><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-hidden="true">#</a></h4><p><code>string</code></p><hr><h3 id="join" tabindex="-1">join <a class="header-anchor" href="#join" aria-hidden="true">#</a></h3><p>\u25B8 <strong>join</strong>(...<code>paths</code>): <code>string</code></p><p>Join all arguments together and normalize the resulting path.</p><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...paths</code></td><td style="text-align:left;"><code>string</code>[]</td><td style="text-align:left;">Paths to join.</td></tr></tbody></table><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-hidden="true">#</a></h4><p><code>string</code></p><hr><h3 id="relative" tabindex="-1">relative <a class="header-anchor" href="#relative" aria-hidden="true">#</a></h3><p>\u25B8 <strong>relative</strong>(<code>from</code>, <code>to</code>): <code>string</code></p><p>Solve the relative path from {from} to {to}. At times we have two absolute paths, and we need to derive the relative path from one to the other.</p><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>from</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>to</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-hidden="true">#</a></h4><p><code>string</code></p>',41),i=[n];function s(h,o,l,c,p,g){return t(),a("div",null,i)}var m=e(d,[["render",s]]);export{x as __pageData,m as default};
