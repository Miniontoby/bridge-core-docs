import{_ as s,o as a,c as n,i as l}from"./app.59ab206f.js";const C=JSON.parse('{"title":"MoLang","description":"","frontmatter":{"description":"","sidebar":"other","author":"solveddev","next":"/extensions/"},"headers":[{"level":2,"title":"About","slug":"about"},{"level":2,"title":"Installation","slug":"installation"},{"level":2,"title":"Basic Usage","slug":"basic-usage"},{"level":3,"title":"Setting up nested environments","slug":"setting-up-nested-environments"},{"level":2,"title":"Using Custom MoLang Functions","slug":"using-custom-molang-functions"},{"level":2,"title":"Using AST Scripts","slug":"using-ast-scripts"},{"level":2,"title":"Performance","slug":"performance"},{"level":3,"title":"Vanilla Script","slug":"vanilla-script"},{"level":3,"title":"MoLang","slug":"molang-1"},{"level":3,"title":"MoLangJS","slug":"molangjs"},{"level":3,"title":"Early Return","slug":"early-return"},{"level":3,"title":"MoLang","slug":"molang-2"},{"level":3,"title":"MoLangJS","slug":"molangjs-1"},{"level":2,"title":"MoLang Playground","slug":"molang-playground"}],"relativePath":"guide/other/molang.md","lastUpdated":1657807348000}'),o={name:"guide/other/molang.md"},e=l(`<h1 id="molang" tabindex="-1">MoLang <a class="header-anchor" href="#molang" aria-hidden="true">#</a></h1><p>A fast MoLang parser used and developed by the bridge. team. This library has full support for all of Minecraft&#39;s MoLang features.</p><h2 id="about" tabindex="-1">About <a class="header-anchor" href="#about" aria-hidden="true">#</a></h2><blockquote><p>MoLang is a simple expression-based language designed for fast calculation of values at run-time. Its focus is solely to enable script-like capabilities in high-performance systems where JavaScript is not performant at scale. We need scripting capabilities in these low-level systems to support end-user modding capabilities, custom entities, rendering, and animations.</p></blockquote><p>- From the Minecraft documentation</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h2><ul><li><p><code>npm i molang</code></p><p><strong>or</strong></p></li><li><p>Download the <code>dist/main.web.js</code> file and add the script to your HTML page (library access via global <code>MoLang</code> object).</p></li></ul><h2 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-hidden="true">#</a></h2><p>To execute a basic MoLang statement, first construct a new instance of the <code>MoLang</code> class. The first constructor argument is the environment your MoLang script will have access to and the second argument configures the MoLang interpreter. Take a look at the <code>IParserConfig</code> interface <a href="https://github.com/bridge-core/MoLang/blob/master/lib/main.ts" target="_blank" rel="noopener noreferrer">for a list of all available options</a>.</p><p><code>molang.execute(...)</code> simple executes a MoLang script and returns the value it evaluates to.</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MoLang</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">molang</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> molang </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MoLang</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">				</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">useCache</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">molang</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">query.x + query.get(3) == 7</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="setting-up-nested-environments" tabindex="-1">Setting up nested environments <a class="header-anchor" href="#setting-up-nested-environments" aria-hidden="true">#</a></h3><p>For the context switching operator &quot;-&gt;&quot;, you can set up nested environments like this:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MoLang</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">molang</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> molang </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MoLang</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">other</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Context</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">molang</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">query.test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// Returns 1</span></span>
<span class="line"><span style="color:#A6ACCD;">molang</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">context.other-&gt;query.test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// Returns 2</span></span>
<span class="line"></span></code></pre></div><h2 id="using-custom-molang-functions" tabindex="-1">Using Custom MoLang Functions <a class="header-anchor" href="#using-custom-molang-functions" aria-hidden="true">#</a></h2><p>Custom MoLang functions were designed to support <code>.molang</code> files within bridge.</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CustomMoLang</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">molang</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> customMoLang </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CustomMoLang</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> moLangFunctions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Somehow load MoLang input that defines custom functions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Make custom functions known to MoLang parser</span></span>
<span class="line"><span style="color:#A6ACCD;">customMoLang</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(moLangFunctions)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> moLangSource </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Somehow load MoLang source from JSON files</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> transformedSource </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> customMoLang</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(moLangSource)</span></span>
<span class="line"><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Write the transformed source string back to the JSON file or do further processing</span></span>
<span class="line"></span></code></pre></div><p>A custom MoLang function is defined like this:</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sq</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">base</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	return math.pow(a.base</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 2);</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pow</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">base</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">exp</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	return a.exp == 0 ? </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> a.base * f.pow(a.base</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> a.exp - 1);</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span></code></pre></div><ul><li>The first argument always defines the function name</li><li>All following arguments except the last one define input arguments</li><li>The last argument is the function body</li><li>Temporary variables get scoped to the current function body automatically</li><li>Basic recursion is supported as long as the interpreter can stop the recursive calls at compile-time</li><li>To call a function inside of MoLang scripts, simply do <code>f.sq(2)</code> or <code>f.pow(3, 2)</code></li></ul><h2 id="using-ast-scripts" tabindex="-1">Using AST Scripts <a class="header-anchor" href="#using-ast-scripts" aria-hidden="true">#</a></h2><p>You can write abitrary scripts to tarverse the abstract syntax tree this library builds.</p><div class="language-javascript"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MoLang</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">expressions</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">molang</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> moLang </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MoLang</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> ast </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> moLang</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">context.other-&gt;query.something + 1</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> NumberExpression </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> expressions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// This increments all numbers within a MoLang script</span></span>
<span class="line"><span style="color:#A6ACCD;">ast </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ast</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">walk</span><span style="color:#A6ACCD;">(expr </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">expr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">NumberExpression</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">NumberExpression</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">expr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eval</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> output </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ast</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &#39;context.other-&gt;query.something+2&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-hidden="true">#</a></h2><p><strong>Disclaimer:</strong> Both bridge.&#39;s MoLang library and Blockbench&#39;s library are usually fast enough. However, bridge.&#39;s MoLang interpreter shines when it comes to executing a wide variety of different scripts (ineffective cache) where it is up to 10x faster interpreting a vanilla MoLang script.</p><h3 id="vanilla-script" tabindex="-1">Vanilla Script <a class="header-anchor" href="#vanilla-script" aria-hidden="true">#</a></h3><p>The following script gets executed 100,000 times for the first test:</p><p><code>variable.hand_bob = query.life_time &lt; 0.01 ? 0.0 : variable.hand_bob + ((query.is_on_ground &amp;&amp; query.is_alive ? math.clamp(math.sqrt(math.pow(query.position_delta(0), 2.0) + math.pow(query.position_delta(2), 2.0)), 0.0, 0.1) : 0.0) - variable.hand_bob) * 0.02;</code></p><h3 id="molang-1" tabindex="-1">MoLang <a class="header-anchor" href="#molang-1" aria-hidden="true">#</a></h3><p>Used by bridge.</p><table><thead><tr><th>Test</th><th>Average Time</th></tr></thead><tbody><tr><td>Parse &amp; Execute (uncached)</td><td>1253.332ms</td></tr><tr><td>Parse &amp; Execute (cached)</td><td>90.036ms</td></tr></tbody></table><h3 id="molangjs" tabindex="-1">MoLangJS <a class="header-anchor" href="#molangjs" aria-hidden="true">#</a></h3><p>Used by Blockbench &amp; Snowstorm</p><table><thead><tr><th>Test</th><th>Average Time</th></tr></thead><tbody><tr><td>Parse &amp; Execute (uncached)</td><td>11872ms</td></tr><tr><td>Parse &amp; Execute (cached)</td><td>185.299ms</td></tr></tbody></table><h3 id="early-return" tabindex="-1">Early Return <a class="header-anchor" href="#early-return" aria-hidden="true">#</a></h3><p>The same script as above, except that we now insert a &quot;return 1;&quot; in front of it. bridge.&#39;s interpreter is smart enough to figure out that the whole expression is static after it parsed <code>return 1;</code>. These kinds of optimizations can be found throughout our library.</p><h3 id="molang-2" tabindex="-1">MoLang <a class="header-anchor" href="#molang-2" aria-hidden="true">#</a></h3><p>Used by bridge.</p><table><thead><tr><th>Test</th><th>Average Time</th></tr></thead><tbody><tr><td>Parse &amp; Execute (uncached)</td><td>103.61ms</td></tr><tr><td>Parse &amp; Execute (cached)</td><td>8.835ms</td></tr></tbody></table><h3 id="molangjs-1" tabindex="-1">MoLangJS <a class="header-anchor" href="#molangjs-1" aria-hidden="true">#</a></h3><p>Used by Blockbench &amp; Snowstorm</p><table><thead><tr><th>Test</th><th>Average Time</th></tr></thead><tbody><tr><td>Parse &amp; Execute (uncached)</td><td>13230.682ms</td></tr><tr><td>Parse &amp; Execute (cached)</td><td>147,786ms</td></tr></tbody></table><h2 id="molang-playground" tabindex="-1">MoLang Playground <a class="header-anchor" href="#molang-playground" aria-hidden="true">#</a></h2><p>We have built a very basic MoLang playground with this interpreter. You can use it at <a href="https://bridge-core.github.io/molang-playground" target="_blank" rel="noopener noreferrer">bridge-core.github.io/molang-playground</a>.</p>`,44),p=[e];function t(r,c,i,y,D,F){return a(),n("div",null,p)}var d=s(o,[["render",t]]);export{C as __pageData,d as default};
