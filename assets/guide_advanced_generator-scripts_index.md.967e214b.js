import{_ as s,o as a,c as n,d as e}from"./app.88375fe2.js";const d=JSON.parse('{"title":"\u{1F916} Generator Scripts","description":"Learn how to generate any file within your project with JavaScript or TypeScript","frontmatter":{"title":"\u{1F916} Generator Scripts","description":"Learn how to generate any file within your project with JavaScript or TypeScript","sidebar":"advanced"},"headers":[{"level":2,"title":"Basics","slug":"basics"},{"level":2,"title":"File Templates","slug":"file-templates"},{"level":3,"title":"Usage","slug":"usage"},{"level":3,"title":"API","slug":"api"},{"level":2,"title":"File Collections","slug":"file-collections"},{"level":3,"title":"Usage","slug":"usage-1"},{"level":3,"title":"API","slug":"api-1"}],"relativePath":"guide/advanced/generator-scripts/index.md","lastUpdated":1666126402000}'),l={name:"guide/advanced/generator-scripts/index.md"},p=e(`<h1 id="\u{1F916}-generator-scripts" tabindex="-1">\u{1F916} Generator Scripts <a class="header-anchor" href="#\u{1F916}-generator-scripts" aria-hidden="true">#</a></h1><p>This page serves as an introduction to bridge.&#39;s generator scripts and how you can utilize them to generate files within your project. You will learn about the following topics inside of this article:</p><p>\u2611\uFE0F What is a generator script?<br> \u2611\uFE0F How to use a generator script.<br> \u2611\uFE0F How to generate multiple files with a single generator script.<br></p><h2 id="basics" tabindex="-1">Basics <a class="header-anchor" href="#basics" aria-hidden="true">#</a></h2><p>Generator scripts are JavaScript or TypeScript files placed anywhere within your project to generate JSON, mcfunction or other files.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Make sure that the &quot;generatorScripts&quot; plugin is listed within your <a href="/guide/advanced/dash/index.html#build-profiles">compiler config</a> in order for generator scripts to work.</p></div><p>A generator script should &quot;export default&quot; the content of the file to generate. The generated file extension is automatically inferred from the file location.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#676E95;">// Generate an item file</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">format_version</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1.16.100</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">minecraft:item</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{...},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#676E95;">// Generate a mcfunction file</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">/say Hello World!</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can find TypeScript declaration files for the <code>@bridge/generate</code> module <a href="https://github.com/bridge-core/editor-packages/blob/main/packages/minecraftBedrock/types/generatorScript/main.d.ts" target="_blank" rel="noreferrer">here</a>. Please note that bridge. automatically loads these type declarations for you so no manual setup is required in this case.</p></div><h2 id="file-templates" tabindex="-1">File Templates <a class="header-anchor" href="#file-templates" aria-hidden="true">#</a></h2><p>Embedding the full file within a generator script might not be desirable for multiple reasons:</p><ol><li>It might be hard for people to make edits if they are not familiar with programming</li><li>You do not get auto-completions, syntax highlighting and diagnostics within generator scripts</li></ol><p>That is why you can use a template to generate your files. You can use any file within your content as a template.</p><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h3><p>To start using a template, import the <code>useTemplate</code> function from the <code>@bridge/generate</code> module.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useTemplate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@bridge/generate</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>Then, use the <code>useTemplate</code> function to import a file.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#676E95;">// mcfunction is of type string</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> mcfunctionFile </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useTemplate</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../functions/template.mcfunction</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// jsonFile is of type object</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> jsonFile </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useTemplate</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./template/entity.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>You can now use the <code>mcfunctionFile</code> or <code>jsonFile</code> variables which store the respective file content.</p><h3 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-hidden="true">#</a></h3><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IUseTemplateOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">	 * Whether to omit the template file from the build output</span></span>
<span class="line"><span style="color:#676E95;">	 * </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">default</span><span style="color:#676E95;"> </span><span style="color:#A6ACCD;">true</span></span>
<span class="line"><span style="color:#676E95;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">omitTemplate</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;"> * Import a file template</span></span>
<span class="line"><span style="color:#676E95;"> * </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">param</span><span style="color:#676E95;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#676E95;"> Path to the template relative to the generator script</span></span>
<span class="line"><span style="color:#676E95;"> * </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">param</span><span style="color:#676E95;"> </span><span style="color:#A6ACCD;">options</span><span style="color:#676E95;"> Configure how to use the template</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useTemplate</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#A6ACCD;">templatePath</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IUseTemplateOptions</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="file-collections" tabindex="-1">File Collections <a class="header-anchor" href="#file-collections" aria-hidden="true">#</a></h2><p>File collections are a convenient way to generate multiple files with a single generator script.</p><h3 id="usage-1" tabindex="-1">Usage <a class="header-anchor" href="#usage-1" aria-hidden="true">#</a></h3><p>To get started, import the <code>createCollection</code> function from the <code>@bridge/generate</code> module.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createCollection</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@bridge/generate</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>Then, create a new collection with the <code>createCollection</code> function.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> collection </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createCollection</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>You can now add files to the collection with the <code>add</code> function. The <code>add</code> method takes two arguments: The first one sets the file path of the file to generate and the second one sets the content of the file to generate.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#A6ACCD;">collection</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./blaze.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{...}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>Finally, you can need to &quot;export default&quot; the collection to generate the files.</p><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> collection</span></span>
<span class="line"></span></code></pre></div><h3 id="api-1" tabindex="-1">API <a class="header-anchor" href="#api-1" aria-hidden="true">#</a></h3><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FileCollection</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">	 * Add a file to the collection</span></span>
<span class="line"><span style="color:#676E95;">	 * </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">param</span><span style="color:#676E95;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#676E95;"> Path of the file relative to the generator script</span></span>
<span class="line"><span style="color:#676E95;">	 * </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">param</span><span style="color:#676E95;"> </span><span style="color:#A6ACCD;">content</span><span style="color:#676E95;"> Content of the file to generate</span></span>
<span class="line"><span style="color:#676E95;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">	 * Get a file from the collection</span></span>
<span class="line"><span style="color:#676E95;">	 * </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">param</span><span style="color:#676E95;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#676E95;"> Path of the file relative to the generator script</span></span>
<span class="line"><span style="color:#676E95;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">	 * Returns whether a file exists in the collection</span></span>
<span class="line"><span style="color:#676E95;">	 * </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">param</span><span style="color:#676E95;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#676E95;"> Path of the file relative to the generator script</span></span>
<span class="line"><span style="color:#676E95;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">has</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;"> * Create a new file collection</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createCollection</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FileCollection</span></span>
<span class="line"></span></code></pre></div>`,35),o=[p];function t(c,r,i,y,D,F){return a(),n("div",null,o)}const A=s(l,[["render",t]]);export{d as __pageData,A as default};
